/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"encoding/json"
)

// TagCountOut struct for TagCountOut
type TagCountOut struct {
	// A number of entries on the current page.
	Count *int32 `json:"count,omitempty"`
	// A current page number.
	Page *int32 `json:"page,omitempty"`
	// A page size â€“ a number of entries per single page.
	PerPage *int32 `json:"per_page,omitempty"`
	// The list of tags on the systems
	Results *map[string]int32 `json:"results,omitempty"`
	// Total number of items in the \"data\" list.
	Total *int32 `json:"total,omitempty"`
}

// NewTagCountOut instantiates a new TagCountOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCountOut() *TagCountOut {
	this := TagCountOut{}
	return &this
}

// NewTagCountOutWithDefaults instantiates a new TagCountOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCountOutWithDefaults() *TagCountOut {
	this := TagCountOut{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TagCountOut) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountOut) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TagCountOut) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *TagCountOut) SetCount(v int32) {
	o.Count = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *TagCountOut) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountOut) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *TagCountOut) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *TagCountOut) SetPage(v int32) {
	o.Page = &v
}

// GetPerPage returns the PerPage field value if set, zero value otherwise.
func (o *TagCountOut) GetPerPage() int32 {
	if o == nil || o.PerPage == nil {
		var ret int32
		return ret
	}
	return *o.PerPage
}

// GetPerPageOk returns a tuple with the PerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountOut) GetPerPageOk() (*int32, bool) {
	if o == nil || o.PerPage == nil {
		return nil, false
	}
	return o.PerPage, true
}

// HasPerPage returns a boolean if a field has been set.
func (o *TagCountOut) HasPerPage() bool {
	if o != nil && o.PerPage != nil {
		return true
	}

	return false
}

// SetPerPage gets a reference to the given int32 and assigns it to the PerPage field.
func (o *TagCountOut) SetPerPage(v int32) {
	o.PerPage = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *TagCountOut) GetResults() map[string]int32 {
	if o == nil || o.Results == nil {
		var ret map[string]int32
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountOut) GetResultsOk() (*map[string]int32, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *TagCountOut) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string]int32 and assigns it to the Results field.
func (o *TagCountOut) SetResults(v map[string]int32) {
	o.Results = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *TagCountOut) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountOut) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *TagCountOut) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *TagCountOut) SetTotal(v int32) {
	o.Total = &v
}

func (o TagCountOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.PerPage != nil {
		toSerialize["per_page"] = o.PerPage
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableTagCountOut struct {
	value *TagCountOut
	isSet bool
}

func (v NullableTagCountOut) Get() *TagCountOut {
	return v.value
}

func (v *NullableTagCountOut) Set(val *TagCountOut) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCountOut) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCountOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCountOut(val *TagCountOut) *NullableTagCountOut {
	return &NullableTagCountOut{value: val, isSet: true}
}

func (v NullableTagCountOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCountOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


