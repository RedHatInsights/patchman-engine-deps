/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"encoding/json"
)

// CreateHostOutAllOf struct for CreateHostOutAllOf
type CreateHostOutAllOf struct {
	// A Red Hat Account number that owns the host.
	Account string `json:"account"`
	// The ansible host name for remediations
	AnsibleHost NullableString `json:"ansible_host,omitempty"`
	// A timestamp when the entry was created.
	Created *string `json:"created,omitempty"`
	// Timestamp from which the host is considered deleted.
	CulledTimestamp NullableString `json:"culled_timestamp,omitempty"`
	// A hostâ€™s human-readable display name, e.g. in a form of a domain name.
	DisplayName NullableString `json:"display_name,omitempty"`
	// A set of facts belonging to the host.
	Facts *[]map[string]interface{} `json:"facts,omitempty"`
	// A durable and reliable platform-wide host identifier. Applications should use this identifier to reference hosts.
	Id *string `json:"id,omitempty"`
	// Reporting source of the host. Used when updating the stale_timestamp.
	Reporter NullableString `json:"reporter,omitempty"`
	// Timestamp from which the host is considered stale.
	StaleTimestamp NullableString `json:"stale_timestamp,omitempty"`
	// Timestamp from which the host is considered too stale to be listed without an explicit toggle.
	StaleWarningTimestamp NullableString `json:"stale_warning_timestamp,omitempty"`
	// A timestamp when the entry was last updated.
	Updated *string `json:"updated,omitempty"`
}

// NewCreateHostOutAllOf instantiates a new CreateHostOutAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateHostOutAllOf(account string, ) *CreateHostOutAllOf {
	this := CreateHostOutAllOf{}
	this.Account = account
	return &this
}

// NewCreateHostOutAllOfWithDefaults instantiates a new CreateHostOutAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateHostOutAllOfWithDefaults() *CreateHostOutAllOf {
	this := CreateHostOutAllOf{}
	return &this
}

// GetAccount returns the Account field value
func (o *CreateHostOutAllOf) GetAccount() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *CreateHostOutAllOf) GetAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *CreateHostOutAllOf) SetAccount(v string) {
	o.Account = v
}

// GetAnsibleHost returns the AnsibleHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetAnsibleHost() string {
	if o == nil || o.AnsibleHost.Get() == nil {
		var ret string
		return ret
	}
	return *o.AnsibleHost.Get()
}

// GetAnsibleHostOk returns a tuple with the AnsibleHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetAnsibleHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AnsibleHost.Get(), o.AnsibleHost.IsSet()
}

// HasAnsibleHost returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasAnsibleHost() bool {
	if o != nil && o.AnsibleHost.IsSet() {
		return true
	}

	return false
}

// SetAnsibleHost gets a reference to the given NullableString and assigns it to the AnsibleHost field.
func (o *CreateHostOutAllOf) SetAnsibleHost(v string) {
	o.AnsibleHost.Set(&v)
}
// SetAnsibleHostNil sets the value for AnsibleHost to be an explicit nil
func (o *CreateHostOutAllOf) SetAnsibleHostNil() {
	o.AnsibleHost.Set(nil)
}

// UnsetAnsibleHost ensures that no value is present for AnsibleHost, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetAnsibleHost() {
	o.AnsibleHost.Unset()
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CreateHostOutAllOf) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHostOutAllOf) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *CreateHostOutAllOf) SetCreated(v string) {
	o.Created = &v
}

// GetCulledTimestamp returns the CulledTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetCulledTimestamp() string {
	if o == nil || o.CulledTimestamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.CulledTimestamp.Get()
}

// GetCulledTimestampOk returns a tuple with the CulledTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetCulledTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CulledTimestamp.Get(), o.CulledTimestamp.IsSet()
}

// HasCulledTimestamp returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasCulledTimestamp() bool {
	if o != nil && o.CulledTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCulledTimestamp gets a reference to the given NullableString and assigns it to the CulledTimestamp field.
func (o *CreateHostOutAllOf) SetCulledTimestamp(v string) {
	o.CulledTimestamp.Set(&v)
}
// SetCulledTimestampNil sets the value for CulledTimestamp to be an explicit nil
func (o *CreateHostOutAllOf) SetCulledTimestampNil() {
	o.CulledTimestamp.Set(nil)
}

// UnsetCulledTimestamp ensures that no value is present for CulledTimestamp, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetCulledTimestamp() {
	o.CulledTimestamp.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *CreateHostOutAllOf) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *CreateHostOutAllOf) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetFacts returns the Facts field value if set, zero value otherwise.
func (o *CreateHostOutAllOf) GetFacts() []map[string]interface{} {
	if o == nil || o.Facts == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Facts
}

// GetFactsOk returns a tuple with the Facts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHostOutAllOf) GetFactsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Facts == nil {
		return nil, false
	}
	return o.Facts, true
}

// HasFacts returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasFacts() bool {
	if o != nil && o.Facts != nil {
		return true
	}

	return false
}

// SetFacts gets a reference to the given []map[string]interface{} and assigns it to the Facts field.
func (o *CreateHostOutAllOf) SetFacts(v []map[string]interface{}) {
	o.Facts = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateHostOutAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHostOutAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreateHostOutAllOf) SetId(v string) {
	o.Id = &v
}

// GetReporter returns the Reporter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetReporter() string {
	if o == nil || o.Reporter.Get() == nil {
		var ret string
		return ret
	}
	return *o.Reporter.Get()
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetReporterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reporter.Get(), o.Reporter.IsSet()
}

// HasReporter returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasReporter() bool {
	if o != nil && o.Reporter.IsSet() {
		return true
	}

	return false
}

// SetReporter gets a reference to the given NullableString and assigns it to the Reporter field.
func (o *CreateHostOutAllOf) SetReporter(v string) {
	o.Reporter.Set(&v)
}
// SetReporterNil sets the value for Reporter to be an explicit nil
func (o *CreateHostOutAllOf) SetReporterNil() {
	o.Reporter.Set(nil)
}

// UnsetReporter ensures that no value is present for Reporter, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetReporter() {
	o.Reporter.Unset()
}

// GetStaleTimestamp returns the StaleTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetStaleTimestamp() string {
	if o == nil || o.StaleTimestamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.StaleTimestamp.Get()
}

// GetStaleTimestampOk returns a tuple with the StaleTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetStaleTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StaleTimestamp.Get(), o.StaleTimestamp.IsSet()
}

// HasStaleTimestamp returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasStaleTimestamp() bool {
	if o != nil && o.StaleTimestamp.IsSet() {
		return true
	}

	return false
}

// SetStaleTimestamp gets a reference to the given NullableString and assigns it to the StaleTimestamp field.
func (o *CreateHostOutAllOf) SetStaleTimestamp(v string) {
	o.StaleTimestamp.Set(&v)
}
// SetStaleTimestampNil sets the value for StaleTimestamp to be an explicit nil
func (o *CreateHostOutAllOf) SetStaleTimestampNil() {
	o.StaleTimestamp.Set(nil)
}

// UnsetStaleTimestamp ensures that no value is present for StaleTimestamp, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetStaleTimestamp() {
	o.StaleTimestamp.Unset()
}

// GetStaleWarningTimestamp returns the StaleWarningTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateHostOutAllOf) GetStaleWarningTimestamp() string {
	if o == nil || o.StaleWarningTimestamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.StaleWarningTimestamp.Get()
}

// GetStaleWarningTimestampOk returns a tuple with the StaleWarningTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateHostOutAllOf) GetStaleWarningTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StaleWarningTimestamp.Get(), o.StaleWarningTimestamp.IsSet()
}

// HasStaleWarningTimestamp returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasStaleWarningTimestamp() bool {
	if o != nil && o.StaleWarningTimestamp.IsSet() {
		return true
	}

	return false
}

// SetStaleWarningTimestamp gets a reference to the given NullableString and assigns it to the StaleWarningTimestamp field.
func (o *CreateHostOutAllOf) SetStaleWarningTimestamp(v string) {
	o.StaleWarningTimestamp.Set(&v)
}
// SetStaleWarningTimestampNil sets the value for StaleWarningTimestamp to be an explicit nil
func (o *CreateHostOutAllOf) SetStaleWarningTimestampNil() {
	o.StaleWarningTimestamp.Set(nil)
}

// UnsetStaleWarningTimestamp ensures that no value is present for StaleWarningTimestamp, not even an explicit nil
func (o *CreateHostOutAllOf) UnsetStaleWarningTimestamp() {
	o.StaleWarningTimestamp.Unset()
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *CreateHostOutAllOf) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHostOutAllOf) GetUpdatedOk() (*string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *CreateHostOutAllOf) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *CreateHostOutAllOf) SetUpdated(v string) {
	o.Updated = &v
}

func (o CreateHostOutAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account"] = o.Account
	}
	if o.AnsibleHost.IsSet() {
		toSerialize["ansible_host"] = o.AnsibleHost.Get()
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.CulledTimestamp.IsSet() {
		toSerialize["culled_timestamp"] = o.CulledTimestamp.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	if o.Facts != nil {
		toSerialize["facts"] = o.Facts
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Reporter.IsSet() {
		toSerialize["reporter"] = o.Reporter.Get()
	}
	if o.StaleTimestamp.IsSet() {
		toSerialize["stale_timestamp"] = o.StaleTimestamp.Get()
	}
	if o.StaleWarningTimestamp.IsSet() {
		toSerialize["stale_warning_timestamp"] = o.StaleWarningTimestamp.Get()
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCreateHostOutAllOf struct {
	value *CreateHostOutAllOf
	isSet bool
}

func (v NullableCreateHostOutAllOf) Get() *CreateHostOutAllOf {
	return v.value
}

func (v *NullableCreateHostOutAllOf) Set(val *CreateHostOutAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateHostOutAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateHostOutAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateHostOutAllOf(val *CreateHostOutAllOf) *NullableCreateHostOutAllOf {
	return &NullableCreateHostOutAllOf{value: val, isSet: true}
}

func (v NullableCreateHostOutAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateHostOutAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


