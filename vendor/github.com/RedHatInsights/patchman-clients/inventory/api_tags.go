/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// TagsApiService TagsApi service
type TagsApiService service

type ApiApiTagGetTagsRequest struct {
	ctx _context.Context
	ApiService *TagsApiService
	tags *[]string
	orderBy *string
	orderHow *string
	perPage *int32
	page *int32
	staleness *[]string
	search *string
	registeredWith *string
	filter *map[string]interface{}
}

func (r ApiApiTagGetTagsRequest) Tags(tags []string) ApiApiTagGetTagsRequest {
	r.tags = &tags
	return r
}
func (r ApiApiTagGetTagsRequest) OrderBy(orderBy string) ApiApiTagGetTagsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiTagGetTagsRequest) OrderHow(orderHow string) ApiApiTagGetTagsRequest {
	r.orderHow = &orderHow
	return r
}
func (r ApiApiTagGetTagsRequest) PerPage(perPage int32) ApiApiTagGetTagsRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiTagGetTagsRequest) Page(page int32) ApiApiTagGetTagsRequest {
	r.page = &page
	return r
}
func (r ApiApiTagGetTagsRequest) Staleness(staleness []string) ApiApiTagGetTagsRequest {
	r.staleness = &staleness
	return r
}
func (r ApiApiTagGetTagsRequest) Search(search string) ApiApiTagGetTagsRequest {
	r.search = &search
	return r
}
func (r ApiApiTagGetTagsRequest) RegisteredWith(registeredWith string) ApiApiTagGetTagsRequest {
	r.registeredWith = &registeredWith
	return r
}
func (r ApiApiTagGetTagsRequest) Filter(filter map[string]interface{}) ApiApiTagGetTagsRequest {
	r.filter = &filter
	return r
}

func (r ApiApiTagGetTagsRequest) Execute() (HostData1, *_nethttp.Response, error) {
	return r.ApiService.ApiTagGetTagsExecute(r)
}

/*
 * ApiTagGetTags Get the active host tags for a given account
 * Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiTagGetTagsRequest
 */
func (a *TagsApiService) ApiTagGetTags(ctx _context.Context) ApiApiTagGetTagsRequest {
	return ApiApiTagGetTagsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return HostData1
 */
func (a *TagsApiService) ApiTagGetTagsExecute(r ApiApiTagGetTagsRequest) (HostData1, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  HostData1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TagsApiService.ApiTagGetTags")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.staleness != nil {
		t := *r.staleness
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("staleness", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("staleness", parameterToString(t, "multi"))
		}
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.registeredWith != nil {
		localVarQueryParams.Add("registered_with", parameterToString(*r.registeredWith, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
