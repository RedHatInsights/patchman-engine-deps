/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"encoding/json"
)

// HostData1Tag struct for HostData1Tag
type HostData1Tag struct {
	Key *string `json:"key,omitempty"`
	Namespace NullableString `json:"namespace,omitempty"`
	Value NullableString `json:"value,omitempty"`
}

// NewHostData1Tag instantiates a new HostData1Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostData1Tag() *HostData1Tag {
	this := HostData1Tag{}
	return &this
}

// NewHostData1TagWithDefaults instantiates a new HostData1Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostData1TagWithDefaults() *HostData1Tag {
	this := HostData1Tag{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *HostData1Tag) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostData1Tag) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *HostData1Tag) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *HostData1Tag) SetKey(v string) {
	o.Key = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostData1Tag) GetNamespace() string {
	if o == nil || o.Namespace.Get() == nil {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostData1Tag) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *HostData1Tag) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *HostData1Tag) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *HostData1Tag) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *HostData1Tag) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostData1Tag) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostData1Tag) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *HostData1Tag) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *HostData1Tag) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *HostData1Tag) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *HostData1Tag) UnsetValue() {
	o.Value.Unset()
}

func (o HostData1Tag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHostData1Tag struct {
	value *HostData1Tag
	isSet bool
}

func (v NullableHostData1Tag) Get() *HostData1Tag {
	return v.value
}

func (v *NullableHostData1Tag) Set(val *HostData1Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableHostData1Tag) IsSet() bool {
	return v.isSet
}

func (v *NullableHostData1Tag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostData1Tag(val *HostData1Tag) *NullableHostData1Tag {
	return &NullableHostData1Tag{value: val, isSet: true}
}

func (v NullableHostData1Tag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostData1Tag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


