/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiApiSystemProfileValidateSchemaRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	repoBranch *string
	repoFork *string
	days *int32
	maxMessages *int32
}

func (r ApiApiSystemProfileValidateSchemaRequest) RepoBranch(repoBranch string) ApiApiSystemProfileValidateSchemaRequest {
	r.repoBranch = &repoBranch
	return r
}
func (r ApiApiSystemProfileValidateSchemaRequest) RepoFork(repoFork string) ApiApiSystemProfileValidateSchemaRequest {
	r.repoFork = &repoFork
	return r
}
func (r ApiApiSystemProfileValidateSchemaRequest) Days(days int32) ApiApiSystemProfileValidateSchemaRequest {
	r.days = &days
	return r
}
func (r ApiApiSystemProfileValidateSchemaRequest) MaxMessages(maxMessages int32) ApiApiSystemProfileValidateSchemaRequest {
	r.maxMessages = &maxMessages
	return r
}

func (r ApiApiSystemProfileValidateSchemaRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiSystemProfileValidateSchemaExecute(r)
}

/*
 * ApiSystemProfileValidateSchema validate system profile schema
 * Validates System Profile data from recent Kafka messages against a given spec, and compares it with the current one. Only HBI Admins can access this endpoint.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiSystemProfileValidateSchemaRequest
 */
func (a *DefaultApiService) ApiSystemProfileValidateSchema(ctx _context.Context) ApiApiSystemProfileValidateSchemaRequest {
	return ApiApiSystemProfileValidateSchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) ApiSystemProfileValidateSchemaExecute(r ApiApiSystemProfileValidateSchemaRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiSystemProfileValidateSchema")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system_profile/validate_schema"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.repoBranch == nil {
		return nil, reportError("repoBranch is required and must be specified")
	}

	if r.repoFork != nil {
		localVarQueryParams.Add("repo_fork", parameterToString(*r.repoFork, ""))
	}
	localVarQueryParams.Add("repo_branch", parameterToString(*r.repoBranch, ""))
	if r.days != nil {
		localVarQueryParams.Add("days", parameterToString(*r.days, ""))
	}
	if r.maxMessages != nil {
		localVarQueryParams.Add("max_messages", parameterToString(*r.maxMessages, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
