/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// AdditionalGroup struct for AdditionalGroup
type AdditionalGroup struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewAdditionalGroup instantiates a new AdditionalGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalGroup() *AdditionalGroup {
	this := AdditionalGroup{}
	return &this
}

// NewAdditionalGroupWithDefaults instantiates a new AdditionalGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalGroupWithDefaults() *AdditionalGroup {
	this := AdditionalGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdditionalGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdditionalGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdditionalGroup) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdditionalGroup) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdditionalGroup) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdditionalGroup) SetDescription(v string) {
	o.Description = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *AdditionalGroup) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalGroup) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *AdditionalGroup) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *AdditionalGroup) SetUuid(v string) {
	o.Uuid = &v
}

func (o AdditionalGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableAdditionalGroup struct {
	value *AdditionalGroup
	isSet bool
}

func (v NullableAdditionalGroup) Get() *AdditionalGroup {
	return v.value
}

func (v *NullableAdditionalGroup) Set(val *AdditionalGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalGroup(val *AdditionalGroup) *NullableAdditionalGroup {
	return &NullableAdditionalGroup{value: val, isSet: true}
}

func (v NullableAdditionalGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


