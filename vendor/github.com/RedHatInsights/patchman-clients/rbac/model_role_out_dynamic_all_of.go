/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// RoleOutDynamicAllOf struct for RoleOutDynamicAllOf
type RoleOutDynamicAllOf struct {
	PolicyCount int32 `json:"policyCount"`
	AccessCount int32 `json:"accessCount"`
	Applications []string `json:"applications"`
	System bool `json:"system"`
	PlatformDefault bool `json:"platform_default"`
	GroupsInCount *int32 `json:"groups_in_count,omitempty"`
	GroupsIn *[]AdditionalGroup `json:"groups_in,omitempty"`
}

// NewRoleOutDynamicAllOf instantiates a new RoleOutDynamicAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleOutDynamicAllOf(policyCount int32, accessCount int32, applications []string, system bool, platformDefault bool, ) *RoleOutDynamicAllOf {
	this := RoleOutDynamicAllOf{}
	this.PolicyCount = policyCount
	this.AccessCount = accessCount
	this.Applications = applications
	this.System = system
	this.PlatformDefault = platformDefault
	return &this
}

// NewRoleOutDynamicAllOfWithDefaults instantiates a new RoleOutDynamicAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleOutDynamicAllOfWithDefaults() *RoleOutDynamicAllOf {
	this := RoleOutDynamicAllOf{}
	var system bool = false
	this.System = system
	var platformDefault bool = false
	this.PlatformDefault = platformDefault
	return &this
}

// GetPolicyCount returns the PolicyCount field value
func (o *RoleOutDynamicAllOf) GetPolicyCount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.PolicyCount
}

// GetPolicyCountOk returns a tuple with the PolicyCount field value
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetPolicyCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PolicyCount, true
}

// SetPolicyCount sets field value
func (o *RoleOutDynamicAllOf) SetPolicyCount(v int32) {
	o.PolicyCount = v
}

// GetAccessCount returns the AccessCount field value
func (o *RoleOutDynamicAllOf) GetAccessCount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AccessCount
}

// GetAccessCountOk returns a tuple with the AccessCount field value
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetAccessCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccessCount, true
}

// SetAccessCount sets field value
func (o *RoleOutDynamicAllOf) SetAccessCount(v int32) {
	o.AccessCount = v
}

// GetApplications returns the Applications field value
func (o *RoleOutDynamicAllOf) GetApplications() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetApplicationsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Applications, true
}

// SetApplications sets field value
func (o *RoleOutDynamicAllOf) SetApplications(v []string) {
	o.Applications = v
}

// GetSystem returns the System field value
func (o *RoleOutDynamicAllOf) GetSystem() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.System
}

// GetSystemOk returns a tuple with the System field value
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetSystemOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.System, true
}

// SetSystem sets field value
func (o *RoleOutDynamicAllOf) SetSystem(v bool) {
	o.System = v
}

// GetPlatformDefault returns the PlatformDefault field value
func (o *RoleOutDynamicAllOf) GetPlatformDefault() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.PlatformDefault
}

// GetPlatformDefaultOk returns a tuple with the PlatformDefault field value
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetPlatformDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlatformDefault, true
}

// SetPlatformDefault sets field value
func (o *RoleOutDynamicAllOf) SetPlatformDefault(v bool) {
	o.PlatformDefault = v
}

// GetGroupsInCount returns the GroupsInCount field value if set, zero value otherwise.
func (o *RoleOutDynamicAllOf) GetGroupsInCount() int32 {
	if o == nil || o.GroupsInCount == nil {
		var ret int32
		return ret
	}
	return *o.GroupsInCount
}

// GetGroupsInCountOk returns a tuple with the GroupsInCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetGroupsInCountOk() (*int32, bool) {
	if o == nil || o.GroupsInCount == nil {
		return nil, false
	}
	return o.GroupsInCount, true
}

// HasGroupsInCount returns a boolean if a field has been set.
func (o *RoleOutDynamicAllOf) HasGroupsInCount() bool {
	if o != nil && o.GroupsInCount != nil {
		return true
	}

	return false
}

// SetGroupsInCount gets a reference to the given int32 and assigns it to the GroupsInCount field.
func (o *RoleOutDynamicAllOf) SetGroupsInCount(v int32) {
	o.GroupsInCount = &v
}

// GetGroupsIn returns the GroupsIn field value if set, zero value otherwise.
func (o *RoleOutDynamicAllOf) GetGroupsIn() []AdditionalGroup {
	if o == nil || o.GroupsIn == nil {
		var ret []AdditionalGroup
		return ret
	}
	return *o.GroupsIn
}

// GetGroupsInOk returns a tuple with the GroupsIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutDynamicAllOf) GetGroupsInOk() (*[]AdditionalGroup, bool) {
	if o == nil || o.GroupsIn == nil {
		return nil, false
	}
	return o.GroupsIn, true
}

// HasGroupsIn returns a boolean if a field has been set.
func (o *RoleOutDynamicAllOf) HasGroupsIn() bool {
	if o != nil && o.GroupsIn != nil {
		return true
	}

	return false
}

// SetGroupsIn gets a reference to the given []AdditionalGroup and assigns it to the GroupsIn field.
func (o *RoleOutDynamicAllOf) SetGroupsIn(v []AdditionalGroup) {
	o.GroupsIn = &v
}

func (o RoleOutDynamicAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["policyCount"] = o.PolicyCount
	}
	if true {
		toSerialize["accessCount"] = o.AccessCount
	}
	if true {
		toSerialize["applications"] = o.Applications
	}
	if true {
		toSerialize["system"] = o.System
	}
	if true {
		toSerialize["platform_default"] = o.PlatformDefault
	}
	if o.GroupsInCount != nil {
		toSerialize["groups_in_count"] = o.GroupsInCount
	}
	if o.GroupsIn != nil {
		toSerialize["groups_in"] = o.GroupsIn
	}
	return json.Marshal(toSerialize)
}

type NullableRoleOutDynamicAllOf struct {
	value *RoleOutDynamicAllOf
	isSet bool
}

func (v NullableRoleOutDynamicAllOf) Get() *RoleOutDynamicAllOf {
	return v.value
}

func (v *NullableRoleOutDynamicAllOf) Set(val *RoleOutDynamicAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleOutDynamicAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleOutDynamicAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleOutDynamicAllOf(val *RoleOutDynamicAllOf) *NullableRoleOutDynamicAllOf {
	return &NullableRoleOutDynamicAllOf{value: val, isSet: true}
}

func (v NullableRoleOutDynamicAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleOutDynamicAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


