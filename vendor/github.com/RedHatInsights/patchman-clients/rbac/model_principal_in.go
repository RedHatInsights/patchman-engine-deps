/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// PrincipalIn struct for PrincipalIn
type PrincipalIn struct {
	Username string `json:"username"`
}

// NewPrincipalIn instantiates a new PrincipalIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrincipalIn(username string, ) *PrincipalIn {
	this := PrincipalIn{}
	this.Username = username
	return &this
}

// NewPrincipalInWithDefaults instantiates a new PrincipalIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrincipalInWithDefaults() *PrincipalIn {
	this := PrincipalIn{}
	return &this
}

// GetUsername returns the Username field value
func (o *PrincipalIn) GetUsername() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *PrincipalIn) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *PrincipalIn) SetUsername(v string) {
	o.Username = v
}

func (o PrincipalIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullablePrincipalIn struct {
	value *PrincipalIn
	isSet bool
}

func (v NullablePrincipalIn) Get() *PrincipalIn {
	return v.value
}

func (v *NullablePrincipalIn) Set(val *PrincipalIn) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipalIn) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipalIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipalIn(val *PrincipalIn) *NullablePrincipalIn {
	return &NullablePrincipalIn{value: val, isSet: true}
}

func (v NullablePrincipalIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipalIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


