/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupPrincipalIn struct for GroupPrincipalIn
type GroupPrincipalIn struct {
	Principals []PrincipalIn `json:"principals"`
}

// NewGroupPrincipalIn instantiates a new GroupPrincipalIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPrincipalIn(principals []PrincipalIn, ) *GroupPrincipalIn {
	this := GroupPrincipalIn{}
	this.Principals = principals
	return &this
}

// NewGroupPrincipalInWithDefaults instantiates a new GroupPrincipalIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPrincipalInWithDefaults() *GroupPrincipalIn {
	this := GroupPrincipalIn{}
	return &this
}

// GetPrincipals returns the Principals field value
func (o *GroupPrincipalIn) GetPrincipals() []PrincipalIn {
	if o == nil  {
		var ret []PrincipalIn
		return ret
	}

	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value
// and a boolean to check if the value has been set.
func (o *GroupPrincipalIn) GetPrincipalsOk() (*[]PrincipalIn, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Principals, true
}

// SetPrincipals sets field value
func (o *GroupPrincipalIn) SetPrincipals(v []PrincipalIn) {
	o.Principals = v
}

func (o GroupPrincipalIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["principals"] = o.Principals
	}
	return json.Marshal(toSerialize)
}

type NullableGroupPrincipalIn struct {
	value *GroupPrincipalIn
	isSet bool
}

func (v NullableGroupPrincipalIn) Get() *GroupPrincipalIn {
	return v.value
}

func (v *NullableGroupPrincipalIn) Set(val *GroupPrincipalIn) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPrincipalIn) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPrincipalIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPrincipalIn(val *GroupPrincipalIn) *NullableGroupPrincipalIn {
	return &NullableGroupPrincipalIn{value: val, isSet: true}
}

func (v NullableGroupPrincipalIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPrincipalIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


