/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// ErrorErrors struct for ErrorErrors
type ErrorErrors struct {
	Detail *string `json:"detail,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewErrorErrors instantiates a new ErrorErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorErrors() *ErrorErrors {
	this := ErrorErrors{}
	return &this
}

// NewErrorErrorsWithDefaults instantiates a new ErrorErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorErrorsWithDefaults() *ErrorErrors {
	this := ErrorErrors{}
	return &this
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ErrorErrors) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErrors) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ErrorErrors) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ErrorErrors) SetDetail(v string) {
	o.Detail = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ErrorErrors) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorErrors) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ErrorErrors) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ErrorErrors) SetStatus(v string) {
	o.Status = &v
}

func (o ErrorErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableErrorErrors struct {
	value *ErrorErrors
	isSet bool
}

func (v NullableErrorErrors) Get() *ErrorErrors {
	return v.value
}

func (v *NullableErrorErrors) Set(val *ErrorErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorErrors(val *ErrorErrors) *NullableErrorErrors {
	return &NullableErrorErrors{value: val, isSet: true}
}

func (v NullableErrorErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


