/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// PolicyIn struct for PolicyIn
type PolicyIn struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Group string `json:"group"`
	Roles []string `json:"roles"`
}

// NewPolicyIn instantiates a new PolicyIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyIn(name string, group string, roles []string, ) *PolicyIn {
	this := PolicyIn{}
	this.Name = name
	this.Group = group
	this.Roles = roles
	return &this
}

// NewPolicyInWithDefaults instantiates a new PolicyIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyInWithDefaults() *PolicyIn {
	this := PolicyIn{}
	return &this
}

// GetName returns the Name field value
func (o *PolicyIn) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyIn) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyIn) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyIn) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyIn) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyIn) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyIn) SetDescription(v string) {
	o.Description = &v
}

// GetGroup returns the Group field value
func (o *PolicyIn) GetGroup() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *PolicyIn) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *PolicyIn) SetGroup(v string) {
	o.Group = v
}

// GetRoles returns the Roles field value
func (o *PolicyIn) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *PolicyIn) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *PolicyIn) SetRoles(v []string) {
	o.Roles = v
}

func (o PolicyIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyIn struct {
	value *PolicyIn
	isSet bool
}

func (v NullablePolicyIn) Get() *PolicyIn {
	return v.value
}

func (v *NullablePolicyIn) Set(val *PolicyIn) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyIn) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyIn(val *PolicyIn) *NullablePolicyIn {
	return &NullablePolicyIn{value: val, isSet: true}
}

func (v NullablePolicyIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


