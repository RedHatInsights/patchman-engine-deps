/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CrossAccountRequestApiService CrossAccountRequestApi service
type CrossAccountRequestApiService service

type ApiCreateCrossAccountRequestsRequest struct {
	ctx _context.Context
	ApiService *CrossAccountRequestApiService
	crossAccountRequestIn *CrossAccountRequestIn
}

func (r ApiCreateCrossAccountRequestsRequest) CrossAccountRequestIn(crossAccountRequestIn CrossAccountRequestIn) ApiCreateCrossAccountRequestsRequest {
	r.crossAccountRequestIn = &crossAccountRequestIn
	return r
}

func (r ApiCreateCrossAccountRequestsRequest) Execute() (CrossAccountRequestOut, *_nethttp.Response, error) {
	return r.ApiService.CreateCrossAccountRequestsExecute(r)
}

/*
 * CreateCrossAccountRequests Create a cross account request
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateCrossAccountRequestsRequest
 */
func (a *CrossAccountRequestApiService) CreateCrossAccountRequests(ctx _context.Context) ApiCreateCrossAccountRequestsRequest {
	return ApiCreateCrossAccountRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CrossAccountRequestOut
 */
func (a *CrossAccountRequestApiService) CreateCrossAccountRequestsExecute(r ApiCreateCrossAccountRequestsRequest) (CrossAccountRequestOut, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CrossAccountRequestOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrossAccountRequestApiService.CreateCrossAccountRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cross-account-requests/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.crossAccountRequestIn == nil {
		return localVarReturnValue, nil, reportError("crossAccountRequestIn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.crossAccountRequestIn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrossAccountRequestRequest struct {
	ctx _context.Context
	ApiService *CrossAccountRequestApiService
	uuid string
	queryBy *string
	account *string
	approvedOnly *string
}

func (r ApiGetCrossAccountRequestRequest) QueryBy(queryBy string) ApiGetCrossAccountRequestRequest {
	r.queryBy = &queryBy
	return r
}
func (r ApiGetCrossAccountRequestRequest) Account(account string) ApiGetCrossAccountRequestRequest {
	r.account = &account
	return r
}
func (r ApiGetCrossAccountRequestRequest) ApprovedOnly(approvedOnly string) ApiGetCrossAccountRequestRequest {
	r.approvedOnly = &approvedOnly
	return r
}

func (r ApiGetCrossAccountRequestRequest) Execute() (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	return r.ApiService.GetCrossAccountRequestExecute(r)
}

/*
 * GetCrossAccountRequest Get a cross account request
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uuid ID of cross account request to get
 * @return ApiGetCrossAccountRequestRequest
 */
func (a *CrossAccountRequestApiService) GetCrossAccountRequest(ctx _context.Context, uuid string) ApiGetCrossAccountRequestRequest {
	return ApiGetCrossAccountRequestRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

/*
 * Execute executes the request
 * @return CrossAccountRequestDetailByAccount
 */
func (a *CrossAccountRequestApiService) GetCrossAccountRequestExecute(r ApiGetCrossAccountRequestRequest) (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CrossAccountRequestDetailByAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrossAccountRequestApiService.GetCrossAccountRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cross-account-requests/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.queryBy != nil {
		localVarQueryParams.Add("query_by", parameterToString(*r.queryBy, ""))
	}
	if r.account != nil {
		localVarQueryParams.Add("account", parameterToString(*r.account, ""))
	}
	if r.approvedOnly != nil {
		localVarQueryParams.Add("approved_only", parameterToString(*r.approvedOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCrossAccountRequestsRequest struct {
	ctx _context.Context
	ApiService *CrossAccountRequestApiService
	limit *int32
	offset *int32
	queryBy *string
	account *string
	approvedOnly *string
}

func (r ApiListCrossAccountRequestsRequest) Limit(limit int32) ApiListCrossAccountRequestsRequest {
	r.limit = &limit
	return r
}
func (r ApiListCrossAccountRequestsRequest) Offset(offset int32) ApiListCrossAccountRequestsRequest {
	r.offset = &offset
	return r
}
func (r ApiListCrossAccountRequestsRequest) QueryBy(queryBy string) ApiListCrossAccountRequestsRequest {
	r.queryBy = &queryBy
	return r
}
func (r ApiListCrossAccountRequestsRequest) Account(account string) ApiListCrossAccountRequestsRequest {
	r.account = &account
	return r
}
func (r ApiListCrossAccountRequestsRequest) ApprovedOnly(approvedOnly string) ApiListCrossAccountRequestsRequest {
	r.approvedOnly = &approvedOnly
	return r
}

func (r ApiListCrossAccountRequestsRequest) Execute() (CrossAccountRequestPagination, *_nethttp.Response, error) {
	return r.ApiService.ListCrossAccountRequestsExecute(r)
}

/*
 * ListCrossAccountRequests List the cross account requests for a user or account
 * By default, responses are sorted in ascending order by created_at
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListCrossAccountRequestsRequest
 */
func (a *CrossAccountRequestApiService) ListCrossAccountRequests(ctx _context.Context) ApiListCrossAccountRequestsRequest {
	return ApiListCrossAccountRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CrossAccountRequestPagination
 */
func (a *CrossAccountRequestApiService) ListCrossAccountRequestsExecute(r ApiListCrossAccountRequestsRequest) (CrossAccountRequestPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CrossAccountRequestPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrossAccountRequestApiService.ListCrossAccountRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cross-account-requests/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.queryBy != nil {
		localVarQueryParams.Add("query_by", parameterToString(*r.queryBy, ""))
	}
	if r.account != nil {
		localVarQueryParams.Add("account", parameterToString(*r.account, ""))
	}
	if r.approvedOnly != nil {
		localVarQueryParams.Add("approved_only", parameterToString(*r.approvedOnly, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCrossAccountRequestRequest struct {
	ctx _context.Context
	ApiService *CrossAccountRequestApiService
	uuid string
	crossAccountRequestPatch *CrossAccountRequestPatch
}

func (r ApiPatchCrossAccountRequestRequest) CrossAccountRequestPatch(crossAccountRequestPatch CrossAccountRequestPatch) ApiPatchCrossAccountRequestRequest {
	r.crossAccountRequestPatch = &crossAccountRequestPatch
	return r
}

func (r ApiPatchCrossAccountRequestRequest) Execute() (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	return r.ApiService.PatchCrossAccountRequestExecute(r)
}

/*
 * PatchCrossAccountRequest Update a cross account request
 * Update a cross account request
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uuid ID of cross account request to get
 * @return ApiPatchCrossAccountRequestRequest
 */
func (a *CrossAccountRequestApiService) PatchCrossAccountRequest(ctx _context.Context, uuid string) ApiPatchCrossAccountRequestRequest {
	return ApiPatchCrossAccountRequestRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

/*
 * Execute executes the request
 * @return CrossAccountRequestDetailByAccount
 */
func (a *CrossAccountRequestApiService) PatchCrossAccountRequestExecute(r ApiPatchCrossAccountRequestRequest) (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CrossAccountRequestDetailByAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrossAccountRequestApiService.PatchCrossAccountRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cross-account-requests/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.crossAccountRequestPatch == nil {
		return localVarReturnValue, nil, reportError("crossAccountRequestPatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.crossAccountRequestPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCrossAccountRequestRequest struct {
	ctx _context.Context
	ApiService *CrossAccountRequestApiService
	uuid string
	crossAccountRequestUpdateIn *CrossAccountRequestUpdateIn
}

func (r ApiPutCrossAccountRequestRequest) CrossAccountRequestUpdateIn(crossAccountRequestUpdateIn CrossAccountRequestUpdateIn) ApiPutCrossAccountRequestRequest {
	r.crossAccountRequestUpdateIn = &crossAccountRequestUpdateIn
	return r
}

func (r ApiPutCrossAccountRequestRequest) Execute() (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	return r.ApiService.PutCrossAccountRequestExecute(r)
}

/*
 * PutCrossAccountRequest Update a cross account request
 * Update a cross account request
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uuid ID of cross account request to get
 * @return ApiPutCrossAccountRequestRequest
 */
func (a *CrossAccountRequestApiService) PutCrossAccountRequest(ctx _context.Context, uuid string) ApiPutCrossAccountRequestRequest {
	return ApiPutCrossAccountRequestRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

/*
 * Execute executes the request
 * @return CrossAccountRequestDetailByAccount
 */
func (a *CrossAccountRequestApiService) PutCrossAccountRequestExecute(r ApiPutCrossAccountRequestRequest) (CrossAccountRequestDetailByAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CrossAccountRequestDetailByAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrossAccountRequestApiService.PutCrossAccountRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cross-account-requests/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.crossAccountRequestUpdateIn == nil {
		return localVarReturnValue, nil, reportError("crossAccountRequestUpdateIn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.crossAccountRequestUpdateIn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
