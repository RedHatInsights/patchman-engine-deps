/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupPaginationAllOf struct for GroupPaginationAllOf
type GroupPaginationAllOf struct {
	Data []GroupOut `json:"data"`
}

// NewGroupPaginationAllOf instantiates a new GroupPaginationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPaginationAllOf(data []GroupOut, ) *GroupPaginationAllOf {
	this := GroupPaginationAllOf{}
	this.Data = data
	return &this
}

// NewGroupPaginationAllOfWithDefaults instantiates a new GroupPaginationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPaginationAllOfWithDefaults() *GroupPaginationAllOf {
	this := GroupPaginationAllOf{}
	return &this
}

// GetData returns the Data field value
func (o *GroupPaginationAllOf) GetData() []GroupOut {
	if o == nil  {
		var ret []GroupOut
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *GroupPaginationAllOf) GetDataOk() (*[]GroupOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *GroupPaginationAllOf) SetData(v []GroupOut) {
	o.Data = v
}

func (o GroupPaginationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGroupPaginationAllOf struct {
	value *GroupPaginationAllOf
	isSet bool
}

func (v NullableGroupPaginationAllOf) Get() *GroupPaginationAllOf {
	return v.value
}

func (v *NullableGroupPaginationAllOf) Set(val *GroupPaginationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPaginationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPaginationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPaginationAllOf(val *GroupPaginationAllOf) *NullableGroupPaginationAllOf {
	return &NullableGroupPaginationAllOf{value: val, isSet: true}
}

func (v NullableGroupPaginationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPaginationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


