/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// CrossAccountRequestPatch struct for CrossAccountRequestPatch
type CrossAccountRequestPatch struct {
	StartDate *string `json:"start_date,omitempty"`
	EndDate *string `json:"end_date,omitempty"`
	Roles *[]string `json:"roles,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewCrossAccountRequestPatch instantiates a new CrossAccountRequestPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossAccountRequestPatch() *CrossAccountRequestPatch {
	this := CrossAccountRequestPatch{}
	return &this
}

// NewCrossAccountRequestPatchWithDefaults instantiates a new CrossAccountRequestPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossAccountRequestPatchWithDefaults() *CrossAccountRequestPatch {
	this := CrossAccountRequestPatch{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CrossAccountRequestPatch) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestPatch) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CrossAccountRequestPatch) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CrossAccountRequestPatch) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CrossAccountRequestPatch) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestPatch) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CrossAccountRequestPatch) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CrossAccountRequestPatch) SetEndDate(v string) {
	o.EndDate = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CrossAccountRequestPatch) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestPatch) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CrossAccountRequestPatch) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CrossAccountRequestPatch) SetRoles(v []string) {
	o.Roles = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CrossAccountRequestPatch) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestPatch) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CrossAccountRequestPatch) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CrossAccountRequestPatch) SetStatus(v string) {
	o.Status = &v
}

func (o CrossAccountRequestPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCrossAccountRequestPatch struct {
	value *CrossAccountRequestPatch
	isSet bool
}

func (v NullableCrossAccountRequestPatch) Get() *CrossAccountRequestPatch {
	return v.value
}

func (v *NullableCrossAccountRequestPatch) Set(val *CrossAccountRequestPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossAccountRequestPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossAccountRequestPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossAccountRequestPatch(val *CrossAccountRequestPatch) *NullableCrossAccountRequestPatch {
	return &NullableCrossAccountRequestPatch{value: val, isSet: true}
}

func (v NullableCrossAccountRequestPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossAccountRequestPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


