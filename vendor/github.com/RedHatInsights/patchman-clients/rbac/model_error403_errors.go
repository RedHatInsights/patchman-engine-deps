/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// Error403Errors struct for Error403Errors
type Error403Errors struct {
	Detail *string `json:"detail,omitempty"`
	Source *string `json:"source,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewError403Errors instantiates a new Error403Errors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError403Errors() *Error403Errors {
	this := Error403Errors{}
	return &this
}

// NewError403ErrorsWithDefaults instantiates a new Error403Errors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewError403ErrorsWithDefaults() *Error403Errors {
	this := Error403Errors{}
	return &this
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *Error403Errors) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error403Errors) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *Error403Errors) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *Error403Errors) SetDetail(v string) {
	o.Detail = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Error403Errors) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error403Errors) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Error403Errors) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Error403Errors) SetSource(v string) {
	o.Source = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Error403Errors) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error403Errors) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Error403Errors) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Error403Errors) SetStatus(v string) {
	o.Status = &v
}

func (o Error403Errors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableError403Errors struct {
	value *Error403Errors
	isSet bool
}

func (v NullableError403Errors) Get() *Error403Errors {
	return v.value
}

func (v *NullableError403Errors) Set(val *Error403Errors) {
	v.value = val
	v.isSet = true
}

func (v NullableError403Errors) IsSet() bool {
	return v.isSet
}

func (v *NullableError403Errors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError403Errors(val *Error403Errors) *NullableError403Errors {
	return &NullableError403Errors{value: val, isSet: true}
}

func (v NullableError403Errors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError403Errors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


