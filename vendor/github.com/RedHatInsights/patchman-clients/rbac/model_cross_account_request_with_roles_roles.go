/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// CrossAccountRequestWithRolesRoles struct for CrossAccountRequestWithRolesRoles
type CrossAccountRequestWithRolesRoles struct {
	DisplayName *string `json:"display_name,omitempty"`
	Description *string `json:"description,omitempty"`
	Permissions *[]Permission `json:"permissions,omitempty"`
}

// NewCrossAccountRequestWithRolesRoles instantiates a new CrossAccountRequestWithRolesRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossAccountRequestWithRolesRoles() *CrossAccountRequestWithRolesRoles {
	this := CrossAccountRequestWithRolesRoles{}
	return &this
}

// NewCrossAccountRequestWithRolesRolesWithDefaults instantiates a new CrossAccountRequestWithRolesRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossAccountRequestWithRolesRolesWithDefaults() *CrossAccountRequestWithRolesRoles {
	this := CrossAccountRequestWithRolesRoles{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CrossAccountRequestWithRolesRoles) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestWithRolesRoles) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CrossAccountRequestWithRolesRoles) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CrossAccountRequestWithRolesRoles) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CrossAccountRequestWithRolesRoles) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestWithRolesRoles) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CrossAccountRequestWithRolesRoles) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CrossAccountRequestWithRolesRoles) SetDescription(v string) {
	o.Description = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *CrossAccountRequestWithRolesRoles) GetPermissions() []Permission {
	if o == nil || o.Permissions == nil {
		var ret []Permission
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestWithRolesRoles) GetPermissionsOk() (*[]Permission, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *CrossAccountRequestWithRolesRoles) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *CrossAccountRequestWithRolesRoles) SetPermissions(v []Permission) {
	o.Permissions = &v
}

func (o CrossAccountRequestWithRolesRoles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableCrossAccountRequestWithRolesRoles struct {
	value *CrossAccountRequestWithRolesRoles
	isSet bool
}

func (v NullableCrossAccountRequestWithRolesRoles) Get() *CrossAccountRequestWithRolesRoles {
	return v.value
}

func (v *NullableCrossAccountRequestWithRolesRoles) Set(val *CrossAccountRequestWithRolesRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossAccountRequestWithRolesRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossAccountRequestWithRolesRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossAccountRequestWithRolesRoles(val *CrossAccountRequestWithRolesRoles) *NullableCrossAccountRequestWithRolesRoles {
	return &NullableCrossAccountRequestWithRolesRoles{value: val, isSet: true}
}

func (v NullableCrossAccountRequestWithRolesRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossAccountRequestWithRolesRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


