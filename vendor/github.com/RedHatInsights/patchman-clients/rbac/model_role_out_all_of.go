/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// RoleOutAllOf struct for RoleOutAllOf
type RoleOutAllOf struct {
	PolicyCount *int32 `json:"policyCount,omitempty"`
	AccessCount *int32 `json:"accessCount,omitempty"`
	Applications *[]string `json:"applications,omitempty"`
	System *bool `json:"system,omitempty"`
	PlatformDefault *bool `json:"platform_default,omitempty"`
}

// NewRoleOutAllOf instantiates a new RoleOutAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleOutAllOf() *RoleOutAllOf {
	this := RoleOutAllOf{}
	var system bool = false
	this.System = &system
	var platformDefault bool = false
	this.PlatformDefault = &platformDefault
	return &this
}

// NewRoleOutAllOfWithDefaults instantiates a new RoleOutAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleOutAllOfWithDefaults() *RoleOutAllOf {
	this := RoleOutAllOf{}
	var system bool = false
	this.System = &system
	var platformDefault bool = false
	this.PlatformDefault = &platformDefault
	return &this
}

// GetPolicyCount returns the PolicyCount field value if set, zero value otherwise.
func (o *RoleOutAllOf) GetPolicyCount() int32 {
	if o == nil || o.PolicyCount == nil {
		var ret int32
		return ret
	}
	return *o.PolicyCount
}

// GetPolicyCountOk returns a tuple with the PolicyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutAllOf) GetPolicyCountOk() (*int32, bool) {
	if o == nil || o.PolicyCount == nil {
		return nil, false
	}
	return o.PolicyCount, true
}

// HasPolicyCount returns a boolean if a field has been set.
func (o *RoleOutAllOf) HasPolicyCount() bool {
	if o != nil && o.PolicyCount != nil {
		return true
	}

	return false
}

// SetPolicyCount gets a reference to the given int32 and assigns it to the PolicyCount field.
func (o *RoleOutAllOf) SetPolicyCount(v int32) {
	o.PolicyCount = &v
}

// GetAccessCount returns the AccessCount field value if set, zero value otherwise.
func (o *RoleOutAllOf) GetAccessCount() int32 {
	if o == nil || o.AccessCount == nil {
		var ret int32
		return ret
	}
	return *o.AccessCount
}

// GetAccessCountOk returns a tuple with the AccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutAllOf) GetAccessCountOk() (*int32, bool) {
	if o == nil || o.AccessCount == nil {
		return nil, false
	}
	return o.AccessCount, true
}

// HasAccessCount returns a boolean if a field has been set.
func (o *RoleOutAllOf) HasAccessCount() bool {
	if o != nil && o.AccessCount != nil {
		return true
	}

	return false
}

// SetAccessCount gets a reference to the given int32 and assigns it to the AccessCount field.
func (o *RoleOutAllOf) SetAccessCount(v int32) {
	o.AccessCount = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *RoleOutAllOf) GetApplications() []string {
	if o == nil || o.Applications == nil {
		var ret []string
		return ret
	}
	return *o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutAllOf) GetApplicationsOk() (*[]string, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *RoleOutAllOf) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *RoleOutAllOf) SetApplications(v []string) {
	o.Applications = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *RoleOutAllOf) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutAllOf) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *RoleOutAllOf) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *RoleOutAllOf) SetSystem(v bool) {
	o.System = &v
}

// GetPlatformDefault returns the PlatformDefault field value if set, zero value otherwise.
func (o *RoleOutAllOf) GetPlatformDefault() bool {
	if o == nil || o.PlatformDefault == nil {
		var ret bool
		return ret
	}
	return *o.PlatformDefault
}

// GetPlatformDefaultOk returns a tuple with the PlatformDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleOutAllOf) GetPlatformDefaultOk() (*bool, bool) {
	if o == nil || o.PlatformDefault == nil {
		return nil, false
	}
	return o.PlatformDefault, true
}

// HasPlatformDefault returns a boolean if a field has been set.
func (o *RoleOutAllOf) HasPlatformDefault() bool {
	if o != nil && o.PlatformDefault != nil {
		return true
	}

	return false
}

// SetPlatformDefault gets a reference to the given bool and assigns it to the PlatformDefault field.
func (o *RoleOutAllOf) SetPlatformDefault(v bool) {
	o.PlatformDefault = &v
}

func (o RoleOutAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PolicyCount != nil {
		toSerialize["policyCount"] = o.PolicyCount
	}
	if o.AccessCount != nil {
		toSerialize["accessCount"] = o.AccessCount
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.PlatformDefault != nil {
		toSerialize["platform_default"] = o.PlatformDefault
	}
	return json.Marshal(toSerialize)
}

type NullableRoleOutAllOf struct {
	value *RoleOutAllOf
	isSet bool
}

func (v NullableRoleOutAllOf) Get() *RoleOutAllOf {
	return v.value
}

func (v *NullableRoleOutAllOf) Set(val *RoleOutAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleOutAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleOutAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleOutAllOf(val *RoleOutAllOf) *NullableRoleOutAllOf {
	return &NullableRoleOutAllOf{value: val, isSet: true}
}

func (v NullableRoleOutAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleOutAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


