/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupWithPrincipalsAndRoles struct for GroupWithPrincipalsAndRoles
type GroupWithPrincipalsAndRoles struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Uuid string `json:"uuid"`
	Created string `json:"created"`
	Modified string `json:"modified"`
	Principals []Principal `json:"principals"`
	Roles []RoleOut `json:"roles"`
}

// NewGroupWithPrincipalsAndRoles instantiates a new GroupWithPrincipalsAndRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupWithPrincipalsAndRoles(name string, uuid string, created string, modified string, principals []Principal, roles []RoleOut, ) *GroupWithPrincipalsAndRoles {
	this := GroupWithPrincipalsAndRoles{}
	this.Name = name
	this.Uuid = uuid
	this.Created = created
	this.Modified = modified
	this.Principals = principals
	this.Roles = roles
	return &this
}

// NewGroupWithPrincipalsAndRolesWithDefaults instantiates a new GroupWithPrincipalsAndRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithPrincipalsAndRolesWithDefaults() *GroupWithPrincipalsAndRoles {
	this := GroupWithPrincipalsAndRoles{}
	return &this
}

// GetName returns the Name field value
func (o *GroupWithPrincipalsAndRoles) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupWithPrincipalsAndRoles) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupWithPrincipalsAndRoles) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupWithPrincipalsAndRoles) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupWithPrincipalsAndRoles) SetDescription(v string) {
	o.Description = &v
}

// GetUuid returns the Uuid field value
func (o *GroupWithPrincipalsAndRoles) GetUuid() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *GroupWithPrincipalsAndRoles) SetUuid(v string) {
	o.Uuid = v
}

// GetCreated returns the Created field value
func (o *GroupWithPrincipalsAndRoles) GetCreated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetCreatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *GroupWithPrincipalsAndRoles) SetCreated(v string) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *GroupWithPrincipalsAndRoles) GetModified() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetModifiedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *GroupWithPrincipalsAndRoles) SetModified(v string) {
	o.Modified = v
}

// GetPrincipals returns the Principals field value
func (o *GroupWithPrincipalsAndRoles) GetPrincipals() []Principal {
	if o == nil  {
		var ret []Principal
		return ret
	}

	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetPrincipalsOk() (*[]Principal, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Principals, true
}

// SetPrincipals sets field value
func (o *GroupWithPrincipalsAndRoles) SetPrincipals(v []Principal) {
	o.Principals = v
}

// GetRoles returns the Roles field value
func (o *GroupWithPrincipalsAndRoles) GetRoles() []RoleOut {
	if o == nil  {
		var ret []RoleOut
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRoles) GetRolesOk() (*[]RoleOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *GroupWithPrincipalsAndRoles) SetRoles(v []RoleOut) {
	o.Roles = v
}

func (o GroupWithPrincipalsAndRoles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	if true {
		toSerialize["principals"] = o.Principals
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableGroupWithPrincipalsAndRoles struct {
	value *GroupWithPrincipalsAndRoles
	isSet bool
}

func (v NullableGroupWithPrincipalsAndRoles) Get() *GroupWithPrincipalsAndRoles {
	return v.value
}

func (v *NullableGroupWithPrincipalsAndRoles) Set(val *GroupWithPrincipalsAndRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupWithPrincipalsAndRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupWithPrincipalsAndRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupWithPrincipalsAndRoles(val *GroupWithPrincipalsAndRoles) *NullableGroupWithPrincipalsAndRoles {
	return &NullableGroupWithPrincipalsAndRoles{value: val, isSet: true}
}

func (v NullableGroupWithPrincipalsAndRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupWithPrincipalsAndRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


