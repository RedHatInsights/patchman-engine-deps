/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// PolicyExtended struct for PolicyExtended
type PolicyExtended struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Uuid string `json:"uuid"`
	Created string `json:"created"`
	Modified string `json:"modified"`
	Group GroupOut `json:"group"`
	Roles []RoleOut `json:"roles"`
}

// NewPolicyExtended instantiates a new PolicyExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyExtended(name string, uuid string, created string, modified string, group GroupOut, roles []RoleOut, ) *PolicyExtended {
	this := PolicyExtended{}
	this.Name = name
	this.Uuid = uuid
	this.Created = created
	this.Modified = modified
	this.Group = group
	this.Roles = roles
	return &this
}

// NewPolicyExtendedWithDefaults instantiates a new PolicyExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyExtendedWithDefaults() *PolicyExtended {
	this := PolicyExtended{}
	return &this
}

// GetName returns the Name field value
func (o *PolicyExtended) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyExtended) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyExtended) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyExtended) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyExtended) SetDescription(v string) {
	o.Description = &v
}

// GetUuid returns the Uuid field value
func (o *PolicyExtended) GetUuid() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *PolicyExtended) SetUuid(v string) {
	o.Uuid = v
}

// GetCreated returns the Created field value
func (o *PolicyExtended) GetCreated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetCreatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *PolicyExtended) SetCreated(v string) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *PolicyExtended) GetModified() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetModifiedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *PolicyExtended) SetModified(v string) {
	o.Modified = v
}

// GetGroup returns the Group field value
func (o *PolicyExtended) GetGroup() GroupOut {
	if o == nil  {
		var ret GroupOut
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetGroupOk() (*GroupOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *PolicyExtended) SetGroup(v GroupOut) {
	o.Group = v
}

// GetRoles returns the Roles field value
func (o *PolicyExtended) GetRoles() []RoleOut {
	if o == nil  {
		var ret []RoleOut
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *PolicyExtended) GetRolesOk() (*[]RoleOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *PolicyExtended) SetRoles(v []RoleOut) {
	o.Roles = v
}

func (o PolicyExtended) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyExtended struct {
	value *PolicyExtended
	isSet bool
}

func (v NullablePolicyExtended) Get() *PolicyExtended {
	return v.value
}

func (v *NullablePolicyExtended) Set(val *PolicyExtended) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyExtended) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyExtended(val *PolicyExtended) *NullablePolicyExtended {
	return &NullablePolicyExtended{value: val, isSet: true}
}

func (v NullablePolicyExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


