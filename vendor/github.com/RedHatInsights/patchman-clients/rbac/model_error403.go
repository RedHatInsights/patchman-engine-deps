/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// Error403 struct for Error403
type Error403 struct {
	Errors []Error403Errors `json:"errors"`
}

// NewError403 instantiates a new Error403 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError403(errors []Error403Errors, ) *Error403 {
	this := Error403{}
	this.Errors = errors
	return &this
}

// NewError403WithDefaults instantiates a new Error403 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewError403WithDefaults() *Error403 {
	this := Error403{}
	return &this
}

// GetErrors returns the Errors field value
func (o *Error403) GetErrors() []Error403Errors {
	if o == nil  {
		var ret []Error403Errors
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *Error403) GetErrorsOk() (*[]Error403Errors, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *Error403) SetErrors(v []Error403Errors) {
	o.Errors = v
}

func (o Error403) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableError403 struct {
	value *Error403
	isSet bool
}

func (v NullableError403) Get() *Error403 {
	return v.value
}

func (v *NullableError403) Set(val *Error403) {
	v.value = val
	v.isSet = true
}

func (v NullableError403) IsSet() bool {
	return v.isSet
}

func (v *NullableError403) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError403(val *Error403) *NullableError403 {
	return &NullableError403{value: val, isSet: true}
}

func (v NullableError403) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError403) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


