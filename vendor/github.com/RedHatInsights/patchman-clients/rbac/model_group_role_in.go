/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupRoleIn struct for GroupRoleIn
type GroupRoleIn struct {
	Roles []string `json:"roles"`
}

// NewGroupRoleIn instantiates a new GroupRoleIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupRoleIn(roles []string, ) *GroupRoleIn {
	this := GroupRoleIn{}
	this.Roles = roles
	return &this
}

// NewGroupRoleInWithDefaults instantiates a new GroupRoleIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupRoleInWithDefaults() *GroupRoleIn {
	this := GroupRoleIn{}
	return &this
}

// GetRoles returns the Roles field value
func (o *GroupRoleIn) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *GroupRoleIn) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *GroupRoleIn) SetRoles(v []string) {
	o.Roles = v
}

func (o GroupRoleIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableGroupRoleIn struct {
	value *GroupRoleIn
	isSet bool
}

func (v NullableGroupRoleIn) Get() *GroupRoleIn {
	return v.value
}

func (v *NullableGroupRoleIn) Set(val *GroupRoleIn) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupRoleIn) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupRoleIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupRoleIn(val *GroupRoleIn) *NullableGroupRoleIn {
	return &NullableGroupRoleIn{value: val, isSet: true}
}

func (v NullableGroupRoleIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupRoleIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


