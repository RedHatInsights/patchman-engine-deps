/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// CrossAccountRequestByUserIdAllOf struct for CrossAccountRequestByUserIdAllOf
type CrossAccountRequestByUserIdAllOf struct {
	UserId *string `json:"user_id,omitempty"`
}

// NewCrossAccountRequestByUserIdAllOf instantiates a new CrossAccountRequestByUserIdAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossAccountRequestByUserIdAllOf() *CrossAccountRequestByUserIdAllOf {
	this := CrossAccountRequestByUserIdAllOf{}
	return &this
}

// NewCrossAccountRequestByUserIdAllOfWithDefaults instantiates a new CrossAccountRequestByUserIdAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossAccountRequestByUserIdAllOfWithDefaults() *CrossAccountRequestByUserIdAllOf {
	this := CrossAccountRequestByUserIdAllOf{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CrossAccountRequestByUserIdAllOf) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossAccountRequestByUserIdAllOf) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CrossAccountRequestByUserIdAllOf) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CrossAccountRequestByUserIdAllOf) SetUserId(v string) {
	o.UserId = &v
}

func (o CrossAccountRequestByUserIdAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableCrossAccountRequestByUserIdAllOf struct {
	value *CrossAccountRequestByUserIdAllOf
	isSet bool
}

func (v NullableCrossAccountRequestByUserIdAllOf) Get() *CrossAccountRequestByUserIdAllOf {
	return v.value
}

func (v *NullableCrossAccountRequestByUserIdAllOf) Set(val *CrossAccountRequestByUserIdAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossAccountRequestByUserIdAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossAccountRequestByUserIdAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossAccountRequestByUserIdAllOf(val *CrossAccountRequestByUserIdAllOf) *NullableCrossAccountRequestByUserIdAllOf {
	return &NullableCrossAccountRequestByUserIdAllOf{value: val, isSet: true}
}

func (v NullableCrossAccountRequestByUserIdAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossAccountRequestByUserIdAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


