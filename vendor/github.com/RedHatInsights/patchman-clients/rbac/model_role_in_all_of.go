/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// RoleInAllOf struct for RoleInAllOf
type RoleInAllOf struct {
	Access []Access `json:"access"`
}

// NewRoleInAllOf instantiates a new RoleInAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleInAllOf(access []Access, ) *RoleInAllOf {
	this := RoleInAllOf{}
	this.Access = access
	return &this
}

// NewRoleInAllOfWithDefaults instantiates a new RoleInAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleInAllOfWithDefaults() *RoleInAllOf {
	this := RoleInAllOf{}
	return &this
}

// GetAccess returns the Access field value
func (o *RoleInAllOf) GetAccess() []Access {
	if o == nil  {
		var ret []Access
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *RoleInAllOf) GetAccessOk() (*[]Access, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *RoleInAllOf) SetAccess(v []Access) {
	o.Access = v
}

func (o RoleInAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["access"] = o.Access
	}
	return json.Marshal(toSerialize)
}

type NullableRoleInAllOf struct {
	value *RoleInAllOf
	isSet bool
}

func (v NullableRoleInAllOf) Get() *RoleInAllOf {
	return v.value
}

func (v *NullableRoleInAllOf) Set(val *RoleInAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleInAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleInAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleInAllOf(val *RoleInAllOf) *NullableRoleInAllOf {
	return &NullableRoleInAllOf{value: val, isSet: true}
}

func (v NullableRoleInAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleInAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


