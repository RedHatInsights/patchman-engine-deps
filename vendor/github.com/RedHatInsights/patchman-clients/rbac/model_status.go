/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// Status struct for Status
type Status struct {
	ApiVersion int64 `json:"api_version"`
	Commit *string `json:"commit,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
	PlatformInfo *map[string]interface{} `json:"platform_info,omitempty"`
	PythonVersion *string `json:"python_version,omitempty"`
	Modules *map[string]interface{} `json:"modules,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus(apiVersion int64, ) *Status {
	this := Status{}
	this.ApiVersion = apiVersion
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *Status) GetApiVersion() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *Status) GetApiVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *Status) SetApiVersion(v int64) {
	o.ApiVersion = v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *Status) GetCommit() string {
	if o == nil || o.Commit == nil {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetCommitOk() (*string, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *Status) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *Status) SetCommit(v string) {
	o.Commit = &v
}

// GetServerAddress returns the ServerAddress field value if set, zero value otherwise.
func (o *Status) GetServerAddress() string {
	if o == nil || o.ServerAddress == nil {
		var ret string
		return ret
	}
	return *o.ServerAddress
}

// GetServerAddressOk returns a tuple with the ServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetServerAddressOk() (*string, bool) {
	if o == nil || o.ServerAddress == nil {
		return nil, false
	}
	return o.ServerAddress, true
}

// HasServerAddress returns a boolean if a field has been set.
func (o *Status) HasServerAddress() bool {
	if o != nil && o.ServerAddress != nil {
		return true
	}

	return false
}

// SetServerAddress gets a reference to the given string and assigns it to the ServerAddress field.
func (o *Status) SetServerAddress(v string) {
	o.ServerAddress = &v
}

// GetPlatformInfo returns the PlatformInfo field value if set, zero value otherwise.
func (o *Status) GetPlatformInfo() map[string]interface{} {
	if o == nil || o.PlatformInfo == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.PlatformInfo
}

// GetPlatformInfoOk returns a tuple with the PlatformInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetPlatformInfoOk() (*map[string]interface{}, bool) {
	if o == nil || o.PlatformInfo == nil {
		return nil, false
	}
	return o.PlatformInfo, true
}

// HasPlatformInfo returns a boolean if a field has been set.
func (o *Status) HasPlatformInfo() bool {
	if o != nil && o.PlatformInfo != nil {
		return true
	}

	return false
}

// SetPlatformInfo gets a reference to the given map[string]interface{} and assigns it to the PlatformInfo field.
func (o *Status) SetPlatformInfo(v map[string]interface{}) {
	o.PlatformInfo = &v
}

// GetPythonVersion returns the PythonVersion field value if set, zero value otherwise.
func (o *Status) GetPythonVersion() string {
	if o == nil || o.PythonVersion == nil {
		var ret string
		return ret
	}
	return *o.PythonVersion
}

// GetPythonVersionOk returns a tuple with the PythonVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetPythonVersionOk() (*string, bool) {
	if o == nil || o.PythonVersion == nil {
		return nil, false
	}
	return o.PythonVersion, true
}

// HasPythonVersion returns a boolean if a field has been set.
func (o *Status) HasPythonVersion() bool {
	if o != nil && o.PythonVersion != nil {
		return true
	}

	return false
}

// SetPythonVersion gets a reference to the given string and assigns it to the PythonVersion field.
func (o *Status) SetPythonVersion(v string) {
	o.PythonVersion = &v
}

// GetModules returns the Modules field value if set, zero value otherwise.
func (o *Status) GetModules() map[string]interface{} {
	if o == nil || o.Modules == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetModulesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Modules == nil {
		return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *Status) HasModules() bool {
	if o != nil && o.Modules != nil {
		return true
	}

	return false
}

// SetModules gets a reference to the given map[string]interface{} and assigns it to the Modules field.
func (o *Status) SetModules(v map[string]interface{}) {
	o.Modules = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.ServerAddress != nil {
		toSerialize["server_address"] = o.ServerAddress
	}
	if o.PlatformInfo != nil {
		toSerialize["platform_info"] = o.PlatformInfo
	}
	if o.PythonVersion != nil {
		toSerialize["python_version"] = o.PythonVersion
	}
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	return json.Marshal(toSerialize)
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


