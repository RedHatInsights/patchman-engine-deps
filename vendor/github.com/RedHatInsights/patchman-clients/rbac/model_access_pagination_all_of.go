/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// AccessPaginationAllOf struct for AccessPaginationAllOf
type AccessPaginationAllOf struct {
	Data []Access `json:"data"`
}

// NewAccessPaginationAllOf instantiates a new AccessPaginationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPaginationAllOf(data []Access, ) *AccessPaginationAllOf {
	this := AccessPaginationAllOf{}
	this.Data = data
	return &this
}

// NewAccessPaginationAllOfWithDefaults instantiates a new AccessPaginationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPaginationAllOfWithDefaults() *AccessPaginationAllOf {
	this := AccessPaginationAllOf{}
	return &this
}

// GetData returns the Data field value
func (o *AccessPaginationAllOf) GetData() []Access {
	if o == nil  {
		var ret []Access
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AccessPaginationAllOf) GetDataOk() (*[]Access, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *AccessPaginationAllOf) SetData(v []Access) {
	o.Data = v
}

func (o AccessPaginationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableAccessPaginationAllOf struct {
	value *AccessPaginationAllOf
	isSet bool
}

func (v NullableAccessPaginationAllOf) Get() *AccessPaginationAllOf {
	return v.value
}

func (v *NullableAccessPaginationAllOf) Set(val *AccessPaginationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPaginationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPaginationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPaginationAllOf(val *AccessPaginationAllOf) *NullableAccessPaginationAllOf {
	return &NullableAccessPaginationAllOf{value: val, isSet: true}
}

func (v NullableAccessPaginationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPaginationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


