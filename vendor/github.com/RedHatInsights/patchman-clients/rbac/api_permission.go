/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// PermissionApiService PermissionApi service
type PermissionApiService service

type ApiListPermissionOptionsRequest struct {
	ctx _context.Context
	ApiService *PermissionApiService
	field *string
	limit *int32
	offset *int32
	application *string
	resourceType *string
	verb *string
}

func (r ApiListPermissionOptionsRequest) Field(field string) ApiListPermissionOptionsRequest {
	r.field = &field
	return r
}
func (r ApiListPermissionOptionsRequest) Limit(limit int32) ApiListPermissionOptionsRequest {
	r.limit = &limit
	return r
}
func (r ApiListPermissionOptionsRequest) Offset(offset int32) ApiListPermissionOptionsRequest {
	r.offset = &offset
	return r
}
func (r ApiListPermissionOptionsRequest) Application(application string) ApiListPermissionOptionsRequest {
	r.application = &application
	return r
}
func (r ApiListPermissionOptionsRequest) ResourceType(resourceType string) ApiListPermissionOptionsRequest {
	r.resourceType = &resourceType
	return r
}
func (r ApiListPermissionOptionsRequest) Verb(verb string) ApiListPermissionOptionsRequest {
	r.verb = &verb
	return r
}

func (r ApiListPermissionOptionsRequest) Execute() (PermissionOptionsPagination, *_nethttp.Response, error) {
	return r.ApiService.ListPermissionOptionsExecute(r)
}

/*
 * ListPermissionOptions List the available options for fields of permissions for a tenant
 * By default, options of application is returned. And could be resource_type or verb on demand.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPermissionOptionsRequest
 */
func (a *PermissionApiService) ListPermissionOptions(ctx _context.Context) ApiListPermissionOptionsRequest {
	return ApiListPermissionOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PermissionOptionsPagination
 */
func (a *PermissionApiService) ListPermissionOptionsExecute(r ApiListPermissionOptionsRequest) (PermissionOptionsPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PermissionOptionsPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionApiService.ListPermissionOptions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions/options/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	if r.resourceType != nil {
		localVarQueryParams.Add("resource_type", parameterToString(*r.resourceType, ""))
	}
	if r.verb != nil {
		localVarQueryParams.Add("verb", parameterToString(*r.verb, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPermissionsRequest struct {
	ctx _context.Context
	ApiService *PermissionApiService
	limit *int32
	offset *int32
	orderBy *string
	application *string
	resourceType *string
	verb *string
	permission *string
	excludeGlobals *string
}

func (r ApiListPermissionsRequest) Limit(limit int32) ApiListPermissionsRequest {
	r.limit = &limit
	return r
}
func (r ApiListPermissionsRequest) Offset(offset int32) ApiListPermissionsRequest {
	r.offset = &offset
	return r
}
func (r ApiListPermissionsRequest) OrderBy(orderBy string) ApiListPermissionsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiListPermissionsRequest) Application(application string) ApiListPermissionsRequest {
	r.application = &application
	return r
}
func (r ApiListPermissionsRequest) ResourceType(resourceType string) ApiListPermissionsRequest {
	r.resourceType = &resourceType
	return r
}
func (r ApiListPermissionsRequest) Verb(verb string) ApiListPermissionsRequest {
	r.verb = &verb
	return r
}
func (r ApiListPermissionsRequest) Permission(permission string) ApiListPermissionsRequest {
	r.permission = &permission
	return r
}
func (r ApiListPermissionsRequest) ExcludeGlobals(excludeGlobals string) ApiListPermissionsRequest {
	r.excludeGlobals = &excludeGlobals
	return r
}

func (r ApiListPermissionsRequest) Execute() (PermissionPagination, *_nethttp.Response, error) {
	return r.ApiService.ListPermissionsExecute(r)
}

/*
 * ListPermissions List the permissions for a tenant
 * By default, responses are sorted in ascending order by permission application.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPermissionsRequest
 */
func (a *PermissionApiService) ListPermissions(ctx _context.Context) ApiListPermissionsRequest {
	return ApiListPermissionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PermissionPagination
 */
func (a *PermissionApiService) ListPermissionsExecute(r ApiListPermissionsRequest) (PermissionPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PermissionPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionApiService.ListPermissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.application != nil {
		localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	}
	if r.resourceType != nil {
		localVarQueryParams.Add("resource_type", parameterToString(*r.resourceType, ""))
	}
	if r.verb != nil {
		localVarQueryParams.Add("verb", parameterToString(*r.verb, ""))
	}
	if r.permission != nil {
		localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	}
	if r.excludeGlobals != nil {
		localVarQueryParams.Add("exclude_globals", parameterToString(*r.excludeGlobals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
