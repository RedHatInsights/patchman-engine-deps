/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupWithPrincipalsAndRolesAllOf struct for GroupWithPrincipalsAndRolesAllOf
type GroupWithPrincipalsAndRolesAllOf struct {
	Principals []Principal `json:"principals"`
	Roles []RoleOut `json:"roles"`
}

// NewGroupWithPrincipalsAndRolesAllOf instantiates a new GroupWithPrincipalsAndRolesAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupWithPrincipalsAndRolesAllOf(principals []Principal, roles []RoleOut, ) *GroupWithPrincipalsAndRolesAllOf {
	this := GroupWithPrincipalsAndRolesAllOf{}
	this.Principals = principals
	this.Roles = roles
	return &this
}

// NewGroupWithPrincipalsAndRolesAllOfWithDefaults instantiates a new GroupWithPrincipalsAndRolesAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithPrincipalsAndRolesAllOfWithDefaults() *GroupWithPrincipalsAndRolesAllOf {
	this := GroupWithPrincipalsAndRolesAllOf{}
	return &this
}

// GetPrincipals returns the Principals field value
func (o *GroupWithPrincipalsAndRolesAllOf) GetPrincipals() []Principal {
	if o == nil  {
		var ret []Principal
		return ret
	}

	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRolesAllOf) GetPrincipalsOk() (*[]Principal, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Principals, true
}

// SetPrincipals sets field value
func (o *GroupWithPrincipalsAndRolesAllOf) SetPrincipals(v []Principal) {
	o.Principals = v
}

// GetRoles returns the Roles field value
func (o *GroupWithPrincipalsAndRolesAllOf) GetRoles() []RoleOut {
	if o == nil  {
		var ret []RoleOut
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *GroupWithPrincipalsAndRolesAllOf) GetRolesOk() (*[]RoleOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *GroupWithPrincipalsAndRolesAllOf) SetRoles(v []RoleOut) {
	o.Roles = v
}

func (o GroupWithPrincipalsAndRolesAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["principals"] = o.Principals
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableGroupWithPrincipalsAndRolesAllOf struct {
	value *GroupWithPrincipalsAndRolesAllOf
	isSet bool
}

func (v NullableGroupWithPrincipalsAndRolesAllOf) Get() *GroupWithPrincipalsAndRolesAllOf {
	return v.value
}

func (v *NullableGroupWithPrincipalsAndRolesAllOf) Set(val *GroupWithPrincipalsAndRolesAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupWithPrincipalsAndRolesAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupWithPrincipalsAndRolesAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupWithPrincipalsAndRolesAllOf(val *GroupWithPrincipalsAndRolesAllOf) *NullableGroupWithPrincipalsAndRolesAllOf {
	return &NullableGroupWithPrincipalsAndRolesAllOf{value: val, isSet: true}
}

func (v NullableGroupWithPrincipalsAndRolesAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupWithPrincipalsAndRolesAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


