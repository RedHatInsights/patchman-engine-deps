/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// GroupOutAllOf struct for GroupOutAllOf
type GroupOutAllOf struct {
	PrincipalCount *int32 `json:"principalCount,omitempty"`
	RoleCount *int32 `json:"roleCount,omitempty"`
	System *bool `json:"system,omitempty"`
	PlatformDefault *bool `json:"platform_default,omitempty"`
}

// NewGroupOutAllOf instantiates a new GroupOutAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupOutAllOf() *GroupOutAllOf {
	this := GroupOutAllOf{}
	var system bool = false
	this.System = &system
	var platformDefault bool = false
	this.PlatformDefault = &platformDefault
	return &this
}

// NewGroupOutAllOfWithDefaults instantiates a new GroupOutAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupOutAllOfWithDefaults() *GroupOutAllOf {
	this := GroupOutAllOf{}
	var system bool = false
	this.System = &system
	var platformDefault bool = false
	this.PlatformDefault = &platformDefault
	return &this
}

// GetPrincipalCount returns the PrincipalCount field value if set, zero value otherwise.
func (o *GroupOutAllOf) GetPrincipalCount() int32 {
	if o == nil || o.PrincipalCount == nil {
		var ret int32
		return ret
	}
	return *o.PrincipalCount
}

// GetPrincipalCountOk returns a tuple with the PrincipalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupOutAllOf) GetPrincipalCountOk() (*int32, bool) {
	if o == nil || o.PrincipalCount == nil {
		return nil, false
	}
	return o.PrincipalCount, true
}

// HasPrincipalCount returns a boolean if a field has been set.
func (o *GroupOutAllOf) HasPrincipalCount() bool {
	if o != nil && o.PrincipalCount != nil {
		return true
	}

	return false
}

// SetPrincipalCount gets a reference to the given int32 and assigns it to the PrincipalCount field.
func (o *GroupOutAllOf) SetPrincipalCount(v int32) {
	o.PrincipalCount = &v
}

// GetRoleCount returns the RoleCount field value if set, zero value otherwise.
func (o *GroupOutAllOf) GetRoleCount() int32 {
	if o == nil || o.RoleCount == nil {
		var ret int32
		return ret
	}
	return *o.RoleCount
}

// GetRoleCountOk returns a tuple with the RoleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupOutAllOf) GetRoleCountOk() (*int32, bool) {
	if o == nil || o.RoleCount == nil {
		return nil, false
	}
	return o.RoleCount, true
}

// HasRoleCount returns a boolean if a field has been set.
func (o *GroupOutAllOf) HasRoleCount() bool {
	if o != nil && o.RoleCount != nil {
		return true
	}

	return false
}

// SetRoleCount gets a reference to the given int32 and assigns it to the RoleCount field.
func (o *GroupOutAllOf) SetRoleCount(v int32) {
	o.RoleCount = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *GroupOutAllOf) GetSystem() bool {
	if o == nil || o.System == nil {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupOutAllOf) GetSystemOk() (*bool, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *GroupOutAllOf) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *GroupOutAllOf) SetSystem(v bool) {
	o.System = &v
}

// GetPlatformDefault returns the PlatformDefault field value if set, zero value otherwise.
func (o *GroupOutAllOf) GetPlatformDefault() bool {
	if o == nil || o.PlatformDefault == nil {
		var ret bool
		return ret
	}
	return *o.PlatformDefault
}

// GetPlatformDefaultOk returns a tuple with the PlatformDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupOutAllOf) GetPlatformDefaultOk() (*bool, bool) {
	if o == nil || o.PlatformDefault == nil {
		return nil, false
	}
	return o.PlatformDefault, true
}

// HasPlatformDefault returns a boolean if a field has been set.
func (o *GroupOutAllOf) HasPlatformDefault() bool {
	if o != nil && o.PlatformDefault != nil {
		return true
	}

	return false
}

// SetPlatformDefault gets a reference to the given bool and assigns it to the PlatformDefault field.
func (o *GroupOutAllOf) SetPlatformDefault(v bool) {
	o.PlatformDefault = &v
}

func (o GroupOutAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrincipalCount != nil {
		toSerialize["principalCount"] = o.PrincipalCount
	}
	if o.RoleCount != nil {
		toSerialize["roleCount"] = o.RoleCount
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.PlatformDefault != nil {
		toSerialize["platform_default"] = o.PlatformDefault
	}
	return json.Marshal(toSerialize)
}

type NullableGroupOutAllOf struct {
	value *GroupOutAllOf
	isSet bool
}

func (v NullableGroupOutAllOf) Get() *GroupOutAllOf {
	return v.value
}

func (v *NullableGroupOutAllOf) Set(val *GroupOutAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupOutAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupOutAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupOutAllOf(val *GroupOutAllOf) *NullableGroupOutAllOf {
	return &NullableGroupOutAllOf{value: val, isSet: true}
}

func (v NullableGroupOutAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupOutAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


