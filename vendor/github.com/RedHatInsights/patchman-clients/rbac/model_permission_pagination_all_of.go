/*
 * Role Based Access Control
 *
 * The API for Role Based Access Control.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// PermissionPaginationAllOf struct for PermissionPaginationAllOf
type PermissionPaginationAllOf struct {
	Data []Permission `json:"data"`
}

// NewPermissionPaginationAllOf instantiates a new PermissionPaginationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionPaginationAllOf(data []Permission, ) *PermissionPaginationAllOf {
	this := PermissionPaginationAllOf{}
	this.Data = data
	return &this
}

// NewPermissionPaginationAllOfWithDefaults instantiates a new PermissionPaginationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionPaginationAllOfWithDefaults() *PermissionPaginationAllOf {
	this := PermissionPaginationAllOf{}
	return &this
}

// GetData returns the Data field value
func (o *PermissionPaginationAllOf) GetData() []Permission {
	if o == nil  {
		var ret []Permission
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PermissionPaginationAllOf) GetDataOk() (*[]Permission, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PermissionPaginationAllOf) SetData(v []Permission) {
	o.Data = v
}

func (o PermissionPaginationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionPaginationAllOf struct {
	value *PermissionPaginationAllOf
	isSet bool
}

func (v NullablePermissionPaginationAllOf) Get() *PermissionPaginationAllOf {
	return v.value
}

func (v *NullablePermissionPaginationAllOf) Set(val *PermissionPaginationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionPaginationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionPaginationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionPaginationAllOf(val *PermissionPaginationAllOf) *NullablePermissionPaginationAllOf {
	return &NullablePermissionPaginationAllOf{value: val, isSet: true}
}

func (v NullablePermissionPaginationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionPaginationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


