/*
 * VMaaS Webapp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.27.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmaas

import (
	"encoding/json"
)

// PkgTreeItem struct for PkgTreeItem
type PkgTreeItem struct {
	Nevra string `json:"nevra"`
	Summary *string `json:"summary,omitempty"`
	Description *string `json:"description,omitempty"`
	FirstPublished string `json:"first_published"`
	Repositories *[]PkgTreeItemRepositories `json:"repositories,omitempty"`
	Errata *[]PkgTreeItemErrata `json:"errata,omitempty"`
}

// NewPkgTreeItem instantiates a new PkgTreeItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkgTreeItem(nevra string, firstPublished string, ) *PkgTreeItem {
	this := PkgTreeItem{}
	this.Nevra = nevra
	this.FirstPublished = firstPublished
	return &this
}

// NewPkgTreeItemWithDefaults instantiates a new PkgTreeItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkgTreeItemWithDefaults() *PkgTreeItem {
	this := PkgTreeItem{}
	return &this
}

// GetNevra returns the Nevra field value
func (o *PkgTreeItem) GetNevra() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Nevra
}

// GetNevraOk returns a tuple with the Nevra field value
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetNevraOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nevra, true
}

// SetNevra sets field value
func (o *PkgTreeItem) SetNevra(v string) {
	o.Nevra = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *PkgTreeItem) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *PkgTreeItem) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *PkgTreeItem) SetSummary(v string) {
	o.Summary = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PkgTreeItem) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PkgTreeItem) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PkgTreeItem) SetDescription(v string) {
	o.Description = &v
}

// GetFirstPublished returns the FirstPublished field value
func (o *PkgTreeItem) GetFirstPublished() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FirstPublished
}

// GetFirstPublishedOk returns a tuple with the FirstPublished field value
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetFirstPublishedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirstPublished, true
}

// SetFirstPublished sets field value
func (o *PkgTreeItem) SetFirstPublished(v string) {
	o.FirstPublished = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *PkgTreeItem) GetRepositories() []PkgTreeItemRepositories {
	if o == nil || o.Repositories == nil {
		var ret []PkgTreeItemRepositories
		return ret
	}
	return *o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetRepositoriesOk() (*[]PkgTreeItemRepositories, bool) {
	if o == nil || o.Repositories == nil {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *PkgTreeItem) HasRepositories() bool {
	if o != nil && o.Repositories != nil {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []PkgTreeItemRepositories and assigns it to the Repositories field.
func (o *PkgTreeItem) SetRepositories(v []PkgTreeItemRepositories) {
	o.Repositories = &v
}

// GetErrata returns the Errata field value if set, zero value otherwise.
func (o *PkgTreeItem) GetErrata() []PkgTreeItemErrata {
	if o == nil || o.Errata == nil {
		var ret []PkgTreeItemErrata
		return ret
	}
	return *o.Errata
}

// GetErrataOk returns a tuple with the Errata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkgTreeItem) GetErrataOk() (*[]PkgTreeItemErrata, bool) {
	if o == nil || o.Errata == nil {
		return nil, false
	}
	return o.Errata, true
}

// HasErrata returns a boolean if a field has been set.
func (o *PkgTreeItem) HasErrata() bool {
	if o != nil && o.Errata != nil {
		return true
	}

	return false
}

// SetErrata gets a reference to the given []PkgTreeItemErrata and assigns it to the Errata field.
func (o *PkgTreeItem) SetErrata(v []PkgTreeItemErrata) {
	o.Errata = &v
}

func (o PkgTreeItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nevra"] = o.Nevra
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["first_published"] = o.FirstPublished
	}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.Errata != nil {
		toSerialize["errata"] = o.Errata
	}
	return json.Marshal(toSerialize)
}

type NullablePkgTreeItem struct {
	value *PkgTreeItem
	isSet bool
}

func (v NullablePkgTreeItem) Get() *PkgTreeItem {
	return v.value
}

func (v *NullablePkgTreeItem) Set(val *PkgTreeItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePkgTreeItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePkgTreeItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkgTreeItem(val *PkgTreeItem) *NullablePkgTreeItem {
	return &NullablePkgTreeItem{value: val, isSet: true}
}

func (v NullablePkgTreeItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkgTreeItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


